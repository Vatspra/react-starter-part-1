{"version":3,"sources":["logo.svg","components/placeholder/no-data-placeholder.component.jsx","components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","PlaceHolder","props","console","log","className","msg","Card","alt","src","monster","id","name","email","CardList","monsters","length","map","item","index","key","SearchBox","placeholder","handleChange","type","onChange","App","state","searchField","this","filteredVal","filter","res","toLowerCase","includes","e","setState","target","value","fetch","then","json","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"yKAAAA,EAAOC,QAAU,IAA0B,kC,sMCE9BC,G,kBAAc,SAACC,GAE1B,OADAC,QAAQC,IAAI,YAAUF,GACf,yBAAKG,UAAU,iBACnBH,EAAMI,OCHEC,G,MAAO,SAACL,GAEnB,OADAC,QAAQC,IAAIF,GACL,yBAAKG,UAAU,kBACpB,yBAAKG,IAAI,WAAWC,IAAG,+BAA0BP,EAAMQ,QAAQC,GAAxC,iCACvB,gCAAOT,EAAMQ,QAAQE,MACrB,2BAAIV,EAAMQ,QAAQG,UCFTC,G,MAAW,SAACZ,GACvB,OAAGA,EAAMa,SAASC,QAAS,EAClB,kBAAC,EAAD,CAAaV,IAAI,kBAElB,yBAAKD,UAAU,aAAaH,EAAMa,SAASE,KAAI,SAACC,EAAMC,GAAP,OAAiB,kBAAC,EAAD,CAAMC,IAAOD,EAAOT,QAASQ,UCN1FG,G,MAAY,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,aACvC,OAAO,2BAAOlB,UAAU,SACtBmB,KAAK,SACLF,YAAaA,EACbG,SAAUF,MC2DCG,E,kDArCb,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACXZ,SAAU,GACVa,YAAa,IAJH,E,qDAUJ,IAAD,SAC2BC,KAAKF,MAA/BZ,EADD,EACCA,SAAUa,EADX,EACWA,YACZE,EAAcf,EAASgB,QAAO,SAAAC,GAAG,OAAIA,EAAIpB,KAAKqB,cAAcC,SAASN,EAAYK,kBAEvF,OADA9B,QAAQC,IAAI0B,GAGV,yBAAKzB,UAAU,OACb,kBAAC,EAAD,CAAWiB,YAAY,SACrBC,aAAc,SAAAY,GAAC,OAAI,EAAKC,SAAS,CAAER,YAAaO,EAAEE,OAAOC,WAE3D,kBAAC,EAAD,CAAUvB,SAAUe,O,0CAQL,IAAD,OAClBS,MAAM,8CAA8CC,MAAK,SAAAR,GACvD,OAAOA,EAAIS,UACVD,MAAK,SAAAR,GACN,EAAKI,SAAS,CAAErB,SAAUiB,W,GAjCdU,aChBEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,CAAK5C,IAAM,QAEb6C,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBf,MAAK,SAAAgB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxD,QAAQwD,MAAMA,EAAMC,c","file":"static/js/main.fb96d8c0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport './no-data-placeholder.style.css';\nexport const PlaceHolder = (props) => {\n  console.log(\"çsdndn\", props)\n  return <div className=\"flex-centered\">\n    {props.msg}\n  </div>\n}","import React from 'react'\nimport './card.style.css'\nexport const Card = (props) => {\n  console.log(props)\n  return <div className=\"card-container\">\n    <img alt=\"monsters\" src={`https://robohash.org/${props.monster.id}?set=set2 & size=180 * 180 `} />\n    <h2 > {props.monster.name}</h2>\n    <p>{props.monster.email}</p>\n  </div>\n}","import React from 'react'\nimport {PlaceHolder} from '../placeholder/no-data-placeholder.component';\n\nimport { Card } from '../card/card.component'\nimport './card-list.style.css'\nexport const CardList = (props) => {\n  if(props.monsters.length <=0) {\n    return <PlaceHolder msg=\"No data found\" />\n  }\n  return (<div className=\"card-list\">{props.monsters.map((item, index) => <Card key = {index} monster={item} />)}</div>)\n}","import React from 'react';\nimport './search-box.style.css';\n\nexport const SearchBox = ({ placeholder, handleChange }) => {\n  return <input className=\"search\"\n    type=\"search\"\n    placeholder={placeholder}\n    onChange={handleChange} />\n};","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { CardList } from './components/card-list/card-list.component';\nimport { SearchBox } from './components/search-box/search-box.component';\n\n// function App(props) {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>{props.msg}</p>\n//         <p>\n//           Edit <code>src/App.js</code> and save to reload.\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         > \n//           Learn React\n//         </a>\n//       </header>\n//     </div>\n//   );\n// }\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      monsters: [],\n      searchField: ''\n    };\n  }\n  // changeVal = () => {ß\n  //   this.setState({ msg: 'ohhhho' });\n  // }\n  render() {\n    const { monsters, searchField } = this.state;\n    const filteredVal = monsters.filter(res => res.name.toLowerCase().includes(searchField.toLowerCase()))\n    console.log(filteredVal)\n    return (\n      // filteredVal.length > 0 ?\n      <div className=\"App\">\n        <SearchBox placeholder=\"search\"\n          handleChange={e => this.setState({ searchField: e.target.value })} />\n\n        <CardList monsters={filteredVal} />\n        {/* {\n          this.state.monsters.map((res, index) => <h1 key={index}>{res.name}</h1>)\n        } */}\n      </div>\n    )\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users').then(res => {\n      return res.json();\n    }).then(res => {\n      this.setState({ monsters: res });\n    })\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App msg ={\"hi\"}/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}